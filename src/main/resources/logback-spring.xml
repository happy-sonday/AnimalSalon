<?xml version="1.0" encoding="UTF-8"?>
<!-- <configuration> -->
<configuration debug="true">
<!--  에러 방지 : java.lang.NoClassDefFoundError: ch/qos/logback/classic/spi/ThrowableProxy -->


<!--     <property name="LOGS_PATH" value="E:/data/cndsalon/log" /> -->
<property name="LOGS_PATH" value="/home/ec2-user/cndsalon/log" />

    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} --- %msg%n</pattern>
        </encoder>
    </appender>

    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
       
        
       
        <prudent>true</prudent>
        
        <!-- <append>true</append> -->
        
        <!-- 날짜별 폴더 생성 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${LOGS_PATH}/%d{yyyy-MM-dd}/lab_%d{yyyy-MM-dd_HH-mm-ss}_%i.log</fileNamePattern>
            <maxFileSize>100mb</maxFileSize>            
            <maxHistory>10</maxHistory>
            <totalSizeCap>1gb</totalSizeCap>            
        </rollingPolicy>
        
	<!--         
		<filter class="ch.qos.logback.classic.filter.ThresholdFilter">
        	<level>INFO</level>
        </filter> -->
        
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <Pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} --- %msg%n</Pattern>
        </encoder>
        
    </appender>
    
    <!-- loggers -->

	<logger name="com.cndsalon" level="DEBUG" additivity="false">
	 	<appender-ref ref="STDOUT" />
	 	<appender-ref ref="FILE" />
	</logger>

    <logger name="org.springframework" level="ERROR" additivity="false">
     	<appender-ref ref="STDOUT" />
     	<appender-ref ref="FILE" />
    </logger>
    
    <logger name="org.thymeleaf" level="INFO" additivity="false">
    	 <appender-ref ref="STDOUT" />
    	 <appender-ref ref="FILE" />
    </logger>

    <logger name="org.hibernate.SQL" level="ERROR" additivity="false">
    	 <appender-ref ref="STDOUT" />
    	 <appender-ref ref="FILE" />
    </logger>
        
    <!-- log4jdbc 옵션 설정 --> 
    <!-- 
     	jdbc.sqlonly    : Logs only SQL
        jdbc.sqltiming  : Logs the SQL, post-execution, including timing execution statistics
        jdbc.audit      : Logs ALL JDBC calls except for ResultSets
        jdbc.resultset  : all calls to ResultSet objects are logged
        jdbc.connection : Logs connection open and close events
     -->
     
      
    <logger name="jdbc" level="ERROR" additivity="false"/> 
    
    <!-- 커넥션 open close 이벤트를 로그로 남긴다. --> 
    <logger name="jdbc.connection" level="ERROR" additivity="false"/> 
    
    <!-- SQL문만을 로그로 남기며, PreparedStatement일 경우 관련된 argument 값으로 대체된 SQL문이 보여진다. --> 
    <logger name="jdbc.sqlonly" level="ERROR" additivity="false">
         <appender-ref ref="STDOUT" />
    </logger>
    
    <!-- SQL문과 해당 SQL을 실행시키는데 수행된 시간 정보(milliseconds)를 포함한다. --> 
    <logger name="jdbc.sqltiming" level="ERROR" additivity="false"/> 
    
    <!-- ResultSet을 제외한 모든 JDBC 호출 정보를 로그로 남긴다. 많은 양의 로그가 생성되므로 
         특별히 JDBC 문제를 추적해야 할 필요가 있는 경우를 제외하고는 사용을 권장하지 않는다. --> 
    <logger name="jdbc.audit" level="ERROR" additivity="false"/> 
    
    <!-- ResultSet을 포함한 모든 JDBC 호출 정보를 로그로 남기므로 매우 방대한 양의 로그가 생성된다. --> 
    <logger name="jdbc.resultset" level="ERROR" additivity="false"/> 
    
    <!-- SQL 결과 조회된 데이터의 table을 로그로 남긴다. --> 
   <logger name="jdbc.resultsettable" level="ERROR" additivity="false">
   		<appender-ref ref="STDOUT" />
   </logger>

    <root level="ERROR" additivity="false">
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="FILE"/> 
    </root>
    
</configuration>